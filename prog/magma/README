Magma programs
==============

Resultant (logistic and cubic maps)
-----------------------------------

The example code for resultant method in magma
  magma < logres8b.magma
This only works for the bifurcation point of the 8-cycle.
For the general boundary polynomial
  magma < logres8c.magma
For other cycle length, modify the above code.

The cubic map script for 5-cycle bifurcation point
  magma < cubres5b.magma


Groebner Basis
--------------

log*.magma are prewritten scripts Groebner basis routines for Magma

To run it
  magma < log8b.magma

For other case, one can either modify log8b.magma,
  or generate the magma scripts from the Python script mkgb.py

For the general 8-cycle of the simplified logistic map:
  python mkgb.py -R 8 c > R8c.magma
Then call magma
  magma < R8c.magma

For the bifurcation 7-cycle of the original logistic map:
  python mkgb.py -r 7 b

For the onset 5-cycle of the cubic map:
  python mkgb.py -c 5 a


For the Henon map, see hengb3b.magma and hengb4b.magma.



Determinant routines
--------------------

Magma is not very efficient in computing the determinant.

Convert the matrix to magma format, calling the determinant routine there,
  slower than Mathematica
The matsX.dat file is generated as a byproduct of, e.g., log.ma

  python ./mats2magma.py mats9.dat > det9.magma

then

  magma < det9.magma

or in magma
> load det9.magma;

numbthy.py
    collects some basic number theory routines in Python
    mats2magma.py uses numbthy.py


A newer routine is mkintmag.py.  It seems to be doing the same thing. 


Other things
=============
logres.ma
  Mathematica script, logistic map, resultant method


